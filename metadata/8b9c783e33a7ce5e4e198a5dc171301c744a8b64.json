{
  "title": "Learning Python Design Patterns - 2nd Ed (2016) Gooner",
  "uid": 13816807,
  "size": 8012600,
  "categoryP": "other",
  "categoryS": "e_books",
  "magnet": "?xt=urn:btih:8b9c783e33a7ce5e4e198a5dc171301c744a8b64&amp;dn=Learning+Python+Design+Patterns+-+2nd+Ed+%282016%29+Gooner&amp;tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969&amp;tr=udp%3A%2F%2Fzer0day.ch%3A1337&amp;tr=udp%3A%2F%2Fopen.demonii.com%3A1337&amp;tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&amp;tr=udp%3A%2F%2Fexodus.desync.com%3A6969",
  "seeders": 55,
  "leechers": 4,
  "uploader": "GoonerTPB",
  "files": 3,
  "time": 1457650381,
  "description": "Learning Python Design Patterns - 2nd Edition (2016) (Pdf, Epub &amp; Mobi) Gooner\r\n\r\nPublisher: Packt Publishing - ebooks Account; 2nd Revised edition edition (February 15, 2016)\r\nLanguage: English\r\nISBN-10: 178588803X\r\nISBN-13: 978-1785888038\r\n\r\nKey Features:\r\n\r\n* Understand the structural, creational, and behavioral Python design patterns\r\n\r\n* Get to know the context and application of design patterns to solve real-world problems in software architecture, design, and application development\r\n\r\n* Get practical exposure through sample implementations in Python v3.5 for the design patterns featured\r\n\r\nBook Description:\r\n\r\nWith the increasing focus on optimized software architecture and design it is important that software architects think about optimizations in object creation, code structure, and interaction between objects at the architecture or design level. This makes sure that the cost of software maintenance is low and code can be easily reused or is adaptable to change. The key to this is reusability and low maintenance in design patterns.\r\n\r\nBuilding on the success of the previous edition, Learning Python Design Patterns, Second Edition will help you implement real-world scenarios with Python's latest release, Python v3.5.\r\n\r\nWe start by introducing design patterns from the Python perspective. As you progress through the book, you will learn about Singleton patterns, Factory patterns, and Facade patterns in detail. After this, we'll look at how to control object access with proxy patterns. It also covers observer patterns, command patterns, and compound patterns.\r\n\r\nBy the end of the book, you will have enhanced your professional abilities in software architecture, design, and development.\r\n\r\nWhat you will Learn:\r\n\r\n* Enhance your skills to create better software architecture\r\n\r\n* Understand proven solutions to commonly occurring design issues\r\n\r\n* Explore the design principles that form the basis of software design, such as loose coupling, the Hollywood principle and the Open Close principle among others\r\n\r\n* Delve into the object-oriented programming concepts and find out how they are used in software applications\r\n\r\n* Develop an understanding of Creational Design Patterns and the different object creation methods that help you solve issues in software development\r\n\r\n* Use Structural Design Patterns and find out how objects and classes interact to build larger applications\r\n\r\n* Focus on the interaction between objects with the command and observer patterns\r\n\r\n* Improve the productivity and code base of your application using Python design patterns\r\n\r\nAbout the Author:\r\n\r\nChetan Giridhar is a technology leader, open source enthusiast, and Python developer. He has written multiple articles on technology and development practices in magazines such as LinuxForYou and Agile Record, and has published technical papers in the Python Papers journal. He has been a speaker at PyCon conferences such as PyCon India, Asia-Pacific, and New Zealand and loves working on real-time communications, distributed systems, and cloud applications. Chetan has been a reviewer at Packt Publishing and has contributed to books on IPython Visualizations and Core Python.\r\n\r\nTable of Contents:\r\n\r\n1. Introduction to Design Patterns\r\n2. The Singleton Design Pattern\r\n3. The Factory Pattern â€“ Building Factories to Create Objects\r\n4. The Facade Pattern â€“ Being Adaptive with Facade\r\n5. The Proxy Pattern â€“ Controlling Object Access\r\n6. The Observer Pattern â€“ Keeping Objects in the Know\r\n7. The Command Pattern â€“ Encapsulating Invocation\r\n8. The Template Method Pattern â€“ Encapsulating Algorithm\r\n9. Model-View-Controller â€“ Compound Patterns\r\n10. The State Design Pattern\r\n11. AntiPatterns",
  "parsed": {
    "xt": "urn:btih:8b9c783e33a7ce5e4e198a5dc171301c744a8b64",
    "dn": "Learning Python Design Patterns - 2nd Ed (2016) Gooner",
    "tr": [
      "udp://exodus.desync.com:6969",
      "udp://open.demonii.com:1337",
      "udp://tracker.coppersurfer.tk:6969",
      "udp://tracker.leechers-paradise.org:6969",
      "udp://zer0day.ch:1337"
    ],
    "infoHash": "8b9c783e33a7ce5e4e198a5dc171301c744a8b64",
    "infoHashBuffer": {
      "type": "Buffer",
      "data": [
        139,
        156,
        120,
        62,
        51,
        167,
        206,
        94,
        78,
        25,
        138,
        93,
        193,
        113,
        48,
        28,
        116,
        74,
        139,
        100
      ]
    },
    "name": "Learning Python Design Patterns - 2nd Ed (2016) Gooner",
    "announce": [
      "udp://exodus.desync.com:6969",
      "udp://open.demonii.com:1337",
      "udp://tracker.coppersurfer.tk:6969",
      "udp://tracker.leechers-paradise.org:6969",
      "udp://zer0day.ch:1337"
    ],
    "urlList": []
  },
  "previous": 194,
  "peers": 100,
  "last_updated": "2016-12-27T06:27:04.343Z"
}